// Package gen includes the internals for generating code based on protobuf definitions.
package gen

import (
	"fmt"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	fmtPackage      = protogen.GoImportPath("fmt")
	contextPackage  = protogen.GoImportPath("context")
	stormrpcPackage = protogen.GoImportPath("github.com/actatum/stormrpc")
)

const deprectationComment = "// Deprecated: Do not use."

// GenerateFiles generates _stormrpc.pb.go files for the contained service definitions.
func GenerateFiles(gen *protogen.Plugin) {
	packages := make(map[string]int)
	for _, f := range gen.Files {
		if !f.Generate {
			continue
		}

		p, ok := packages[string(f.GoPackageName)]
		if !ok {
			packages[string(f.GoPackageName)] = 0
		}

		GenerateFile(gen, f, p)

		packages[string(f.GoPackageName)]++
	}
}

// GenerateFile generates a _stormrpc.pb.go file containing stormrpc service defintions.
func GenerateFile(gen *protogen.Plugin, file *protogen.File, fileIdx int) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_stormrpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-stormrpc. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	GenerateFileContent(file, g, fileIdx)
	return g
}

// GenerateFileContent generates the stormrpc service definitions, excluding the package statement.
func GenerateFileContent(file *protogen.File, g *protogen.GeneratedFile, fileIdx int) {
	if len(file.Services) == 0 {
		return
	}

	g.P()
	for _, service := range file.Services {
		genService(g, service)
	}

	if fileIdx == 0 {
		genHandlerInterface(g)
	}
}

func genService(g *protogen.GeneratedFile, service *protogen.Service) {
	clientName := service.GoName + "Client"

	g.P("// ", clientName, " is the client API for ", service.GoName, " service.")

	// Client interface.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprectationComment)
	}
	g.AnnotateSymbol(clientName, protogen.Annotation{Location: service.Location})
	g.P("type ", clientName, " interface {")
	for _, method := range service.Methods {
		g.AnnotateSymbol(clientName+"."+method.GoName, protogen.Annotation{Location: method.Location})
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprectationComment)
		}
		g.P(method.Comments.Leading, clientSignature(g, method))
	}
	g.P("}")
	g.P()

	// Client structure.
	g.P("type ", unexport(clientName), " struct {")
	g.P("c *", stormrpcPackage.Ident("Client"))
	g.P("}")
	g.P()

	// NewClient constructor.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P(deprectationComment)
	}
	g.P("func New", clientName, " (c *", stormrpcPackage.Ident("Client"), ") ", clientName, " {")
	g.P("return &", unexport(clientName), "{c}")
	g.P("}")
	g.P()

	var methodIndex int
	for _, method := range service.Methods {
		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			// Unary RPC method
			genClientMethod(g, method)
			methodIndex++
		}
	}

	// Server interface.
	serverType := service.GoName + "Server"
	g.P("// ", serverType, " is the server API for ", service.GoName, " service.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprectationComment)
	}
	g.AnnotateSymbol(serverType, protogen.Annotation{Location: service.Location})
	g.P("type ", serverType, " interface {")
	for _, method := range service.Methods {
		g.AnnotateSymbol(serverType+"."+method.GoName, protogen.Annotation{Location: method.Location})
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprectationComment)
		}
		g.P(method.Comments.Leading, serverSignature(g, method))
	}
	g.P("}")
	g.P()

	// Server registration.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P(deprectationComment)
	}
	g.P("func Register", service.GoName, "Server(s *", stormrpcPackage.Ident("Server"), ", srv ", serverType, ") {")
	g.P("for _, handler := range ", unexport(service.GoName), "Handlers {")
	g.P("handler.SetService(srv)")
	g.P("s.Handle(handler.Route(), handler.HandlerFunc())")
	g.P("}")
	g.P("}")
	g.P()

	// Server handler implementations.
	var handlerNames []string
	for _, method := range service.Methods {
		hname := genServerHandler(g, method)
		handlerNames = append(handlerNames, hname)
	}

	// HandlerFuncs
	g.P("var ", unexport(service.GoName), "Handlers = []handler{")
	for i, method := range service.Methods {
		g.P("&", handlerNames[i], "{route: ", strconv.Quote(routeSignature(service, method)), "},")
	}
	g.P("}")
	g.P()
}

func genHandlerInterface(g *protogen.GeneratedFile) {
	g.P("type handler interface {")
	g.P("Route() string")
	g.P("HandlerFunc() stormrpc.HandlerFunc")
	g.P("SetService(interface{})")
	g.P("}")
}

func clientSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	if !method.Desc.IsStreamingClient() {
		s += ", in *" + g.QualifiedGoIdent(method.Input.GoIdent)
	}
	s += ", opts ...stormrpc.CallOption) ("
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		s += "*" + g.QualifiedGoIdent(method.Output.GoIdent)
	} else {
		s += method.Parent.GoName + "_" + method.GoName + "Client"
	}
	s += ", error)"
	return s
}

func genClientMethod(
	g *protogen.GeneratedFile,
	method *protogen.Method,
) {
	service := method.Parent

	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		g.P(deprectationComment)
	}
	g.P("func (c *", unexport(service.GoName), "Client) ", clientSignature(g, method), "{")
	if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
		g.P("var out ", method.Output.GoIdent)
		g.P(`r, err := stormrpc.NewRequest("` + routeSignature(service, method) + `", in, stormrpc.WithEncodeProto())`)
		g.P("if err != nil { return nil, err }")
		g.P()
		g.P("resp := c.c.Do(ctx, r, opts...)")
		g.P("if resp.Err != nil { return nil, resp.Err }")
		g.P()
		g.P("if err = resp.Decode(&out); err != nil { return nil, err }")
		g.P()
		g.P("return &out, nil")
		g.P("}")
		g.P()
		return
	}
}

func serverSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	var reqArgs []string
	ret := "error"
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, g.QualifiedGoIdent(contextPackage.Ident("Context")))
		ret = "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
	}
	if !method.Desc.IsStreamingClient() {
		reqArgs = append(reqArgs, "*"+g.QualifiedGoIdent(method.Input.GoIdent))
	}
	if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, method.Parent.GoName+"_"+method.GoName+"Server")
	}
	return method.GoName + "(" + strings.Join(reqArgs, ", ") + ") " + ret
}

func genServerHandler(
	g *protogen.GeneratedFile,
	method *protogen.Method,
) string {
	service := method.Parent
	hname := unexport(fmt.Sprintf("_%s_%s_Handler", service.GoName, method.GoName))

	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		g.P("type ", hname, " struct {")
		g.P("route string")
		g.P("svc interface{}")
		g.P("}")
		g.P()
		g.P("func (h *", hname, ") HandlerFunc() stormrpc.HandlerFunc {")
		g.P("return func(ctx ", contextPackage.Ident("Context"), ", r stormrpc.Request) stormrpc.Response {")
		g.P("var in ", method.Input.GoIdent)
		g.P(`if err := r.Decode(&in); err != nil { return stormrpc.NewErrorResponse(r.Reply, `,
			fmtPackage.Ident("Errorf"), `("error decoding request")) }`)
		g.P()
		g.P("out, err := h.svc.(", service.GoName, "Server).", method.GoName, "(ctx, &in)")
		g.P("if err != nil { return stormrpc.NewErrorResponse(r.Reply, err) }")
		g.P()
		g.P("resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())")
		g.P("if err != nil { return stormrpc.NewErrorResponse(r.Reply, err) }")
		g.P()
		g.P("return resp")
		g.P("}")
		g.P("}")

		g.P("")

		g.P("func (h *", hname, ") Route() string {")
		g.P("return h.route")
		g.P("}")

		g.P("")

		g.P("func (h *", hname, ") SetService(svc interface{}) {")
		g.P("h.svc = svc")
		g.P("}")
		g.P()

		return hname
	}

	return hname
}

func routeSignature(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("rpc.%s.%s", service.GoName, method.GoName)
}

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }
